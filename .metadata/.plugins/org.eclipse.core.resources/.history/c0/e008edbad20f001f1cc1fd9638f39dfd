package tp_ia.among;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;

import frsf.cidisi.faia.state.EnvironmentState;

public class AmongEnvironmentState extends EnvironmentState {


	public static final String ONE = "Reactor(1)     ";
    public static final String TWO = "Upper Engine(2)";
    public static final String THREE = "Lower Engine(3)";
    public static final String FOUR = "Security(4)    ";
    public static final String FIVE = "Medbay(5)   ";
    public static final String SIX = "Electrical(6)";
    public static final String SEVEN = "Cafeteria(7)";
    public static final String EIGHT = "Storage(8)  ";
    public static final String NINE = "Weapons(9)  ";
    public static final String TEN = "Admin(10)     ";
    public static final String ELEVEN = "Communication(11)  ";
    public static final String TWELVE = "Shields(12)  ";
    public static final String THIRTEEN = "02(13)     ";
    public static final String FOURTEEN = "Navigation(14)  ";
    
    
    public static final String[][] POSITIONS = new String[][]{
    	{ONE, TWO,THREE, FOUR},
        {TWO, ONE, THREE, FOUR, FIVE, SEVEN},
        {THREE, ONE, TWO, FOUR, SIX, EIGHT},
        {FOUR, TWO, THREE},
        {FIVE, TWO, SEVEN},
        {SIX, THREE, EIGHT},
        {SEVEN, TWO, NINE, FIVE},
        {EIGHT, TEN, SIX, THREE, ELEVEN, TWELVE},
        {NINE, SEVEN, THIRTEEN, FOURTEEN, ELEVEN},
        {TEN, SEVEN, EIGHT},
        {ELEVEN, EIGHT, TWELVE},
        {TWELVE, THIRTEEN, NINE, FOURTEEN},
        {THIRTEEN, NINE, TWELVE, FOURTEEN},
        {FOURTEEN, NINE, THIRTEEN, TWELVE}
    };

    
   
    private HashMap<String, List<Integer>> airship;						//LA NAVE CON LOS DATOS POR HABITACION
    private HashMap<String, List<String>> movements;						//LOS MOVIMIENTOS POSIBLES DESDE CADA HABITACION
    private String agentPosition;												//LA POSICION
    private int agentEnergy;													//LA ENERGIA
    private int totalCrewMembers;
    


    public AmongEnvironmentState() {
        
        this.initState();
    }

    @Override
    public Object clone() {
    	
        return airship.clone();
        
        
    }

    @Override
    public void initState() {
    	
        //1 ==> MAPA COMPLETO
        //2 ==> MAPA REDUCIDO --> COMENTAR LAS ACCIONES QUE YA NO PUEDE HACER
    	
		airship = new HashMap<String, List<Integer>>();
		movements = new HashMap<String, List<String>>();
		
        this.initAirship(1);
        
    }

    @Override
    public boolean equals(Object obj) {
        return true;
    }
    
	
	public HashMap<String, List<Integer>>  getAirship() {
        return airship;
    }

	public String getAgentPosition() {
        return agentPosition;
    }

    
    public int getAgentEnergy() {
        return agentEnergy;
    }
    
    public int getTotalCrewMembers() {
    	return totalCrewMembers;
    }

    public int getTotalTasks() {
    	int n = 0;
   
    	for (Entry<String, List<Integer>> room : airship.entrySet())
    	{
    		n += room.getValue().get(1);
    	}
    	return n;
    }
    
  
    
    public void setAirship(HashMap<String, List<Integer>>  airship) {
        this.airship = airship;
    }
    
    public void setAgentPosition(String agentPosition) {
        this.agentPosition = agentPosition;
    }
    
    public void setAgentEnergy(int agentEnergy) {
        this.agentEnergy = agentEnergy;
    }
    
    public void setTotalCrewMembers(int n) {
    	this.totalCrewMembers = n;
    }

   
    public void setRoomValues(String position, List<Integer> room) {
    		
    	airship.put(position, room);
    }
    
    public Collection<Integer> getAirshipRoomValues(String room) {
    	
    	return airship.get(room);
   
   }
  
    private void initAirship(int type)
    {
    	
    	airship = GlobalVars.airships(type);
    	movements = GlobalVars.movements(type);
    	totalCrewMembers = GlobalVars.totalCrewmembers;
    	agentPosition = GlobalVars.initialNode;
    	agentEnergy = GlobalVars.initalAmongEnergy;
    	
    }
    
    
    public HashMap<String, List<Integer>> getAdjacency(String position) {
    	
    	List<String> rooms = movements.get(position);
    	rooms.add(position);
    	
    	HashMap<String, List<Integer>> adjacentRooms = new HashMap<String, List<Integer>>();

    	for(String room : rooms) adjacentRooms.put(room, airship.get(room));
    	
    	return adjacentRooms;
    
    }
    
    @Override
	public String toString() {
		
		StringBuffer str = new StringBuffer();
		
        str.append("\n=============\nTotal de tripulanes: " + totalCrewMembers + "\n");
        
        	for (Entry<String, List<Integer>> entry : airship.entrySet()) {
    		
    	    String key = entry.getKey();
    	    List<Integer> value = airship.get(key);
    	    
    	    str.append("[" +  key + "\t");
        	
    	    if (value != null)
    	    {
    	    	if (value.get(0) == null)
            		str.append("-,");
            	else
            		str.append(value.get(0) + ",");
            	
            	if (value.get(1) == null)
            		str.append("-]\n");
            	else
            		str.append(value.get(1) + "]\n");
    	    }
        	
        }
    	
        return str.toString();
	}

}
